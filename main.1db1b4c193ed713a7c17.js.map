{"version":3,"sources":["webpack:///./template/timer.hbs","webpack:///./js/timer.js"],"names":["Handlebars","module","exports","template","container","depth0","helpers","partials","data","helper","lookupProperty","parent","propertyName","Object","prototype","hasOwnProperty","call","escapeExpression","hooks","helperMissing","nullContext","selector","targetDate","this","currentDate","Date","createMarkup","timer","arrSelector","selectorId","document","querySelector","insertAdjacentHTML","timerMarkup","date","time","alert","refs","daysRef","hoursRef","minsRef","secsRef","setInterval","diffTime","timeHandler","textContent","days","hours","mins","secs","Math","floor","pad","value","String","padStart"],"mappings":"qGAAA,IAAIA,EAAa,EAAQ,QAEzBC,EAAOC,SAAWF,EAAoB,SAAKA,GAAYG,SAAS,CAAC,SAAW,CAAC,EAAE,YAAY,KAAO,SAASC,EAAUC,EAAOC,EAAQC,EAASC,GACzI,IAAIC,EAAQC,EAAiBN,EAAUM,gBAAkB,SAASC,EAAQC,GACtE,GAAIC,OAAOC,UAAUC,eAAeC,KAAKL,EAAQC,GAC/C,OAAOD,EAAOC,IAKtB,MAAO,2BACHR,EAAUa,iBAAoN,mBAAjMR,EAA+H,OAArHA,EAASC,EAAeJ,EAAQ,gBAA4B,MAAVD,EAAiBK,EAAeL,EAAO,cAAgBA,IAAmBI,EAASL,EAAUc,MAAMC,eAA+CV,EAAOO,KAAe,MAAVX,EAAiBA,EAAUD,EAAUgB,aAAe,GAAI,CAAC,KAAO,aAAa,KAAO,GAAG,KAAOZ,EAAK,IAAM,CAAC,MAAQ,CAAC,KAAO,EAAE,OAAS,IAAI,IAAM,CAAC,KAAO,EAAE,OAAS,OAASC,GACla,itBACJ,SAAU,K,sFC6CZ,I,WAvDE,cAAsC,IAAxBY,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,EAClBC,KAAKC,YAAc,IAAIC,KACvBF,KAAKG,aAAaH,KAAKF,UACvBE,KAAKI,MAAMJ,KAAKD,Y,2BAElBI,aAAA,SAAaL,GACX,IAAMO,EAAc,CAClBC,WAAYR,GAEES,SAASC,cAAc,QAC/BC,mBAAmB,YAAaC,IAAYL,K,EAEtDD,MAAA,SAAMO,GAAM,WACNC,EAAOD,EAAOX,KAAKC,YACvB,GAAa,IAATW,EAAY,OAAOC,MAAM,yBAC7B,IAAMC,EAAO,CACXC,QAASR,SAASC,cAAT,WACIR,KAAKF,SADT,8BAGTkB,SAAUT,SAASC,cAAT,WACGR,KAAKF,SADR,+BAGVmB,QAASV,SAASC,cAAT,WACIR,KAAKF,SADT,8BAGToB,QAASX,SAASC,cAAT,WACIR,KAAKF,SADT,+BAKXqB,aAAY,WACV,IAAMC,EAAW,EAAKC,YAAYT,GAClCE,EAAKC,QAAQO,YAAcF,EAASG,KACpCT,EAAKE,SAASM,YAAcF,EAASI,MACrCV,EAAKG,QAAQK,YAAcF,EAASK,KACpCX,EAAKI,QAAQI,YAAcF,EAASM,KACpCd,GAAc,MACb,M,EAELS,YAAA,SAAYT,GAOV,MAAO,CAAEW,KANII,KAAKC,MAAMhB,EAAO,OAMhBY,MALDxB,KAAK6B,IACjBF,KAAKC,MAAOhB,EAAO,MAAR,OAISa,KAFTzB,KAAK6B,IAAIF,KAAKC,MAAOhB,EAAO,KAAR,MAELc,KADf1B,KAAK6B,IAAIF,KAAKC,MAAOhB,EAAO,IAAe,Q,EAG1DiB,IAAA,SAAIC,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,KAIrC,CAAmB,CACjBlC,SAAU,WACVC,WAAY,IAAIG,KAAK,oB","file":"main.1db1b4c193ed713a7c17.js","sourcesContent":["var Handlebars = require(\"../../node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"timer\\\" id='\"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"selectorId\") || (depth0 != null ? lookupProperty(depth0,\"selectorId\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"selectorId\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":37}}}) : helper)))\n    + \"'>\\r\\n    <div class=\\\"field\\\">\\r\\n        <span class=\\\"value\\\" data-value=\\\"days\\\">\\r\\n            XX\\r\\n        </span>\\r\\n        <span class=\\\"label\\\">Days</span>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n        <span class=\\\"value\\\" data-value=\\\"hours\\\">\\r\\n            XX\\r\\n        </span>\\r\\n        <span class=\\\"label\\\">Hours</span>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n        <span class=\\\"value\\\" data-value=\\\"mins\\\">\\r\\n            XX\\r\\n        </span>\\r\\n        <span class=\\\"label\\\">Minutes</span>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n        <span class=\\\"value\\\" data-value=\\\"secs\\\">\\r\\n            XX\\r\\n        </span>\\r\\n        <span class=\\\"label\\\">Seconds</span>\\r\\n    </div>\\r\\n</div>\";\n},\"useData\":true});","import timerMarkup from '../template/timer.hbs';\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    this.currentDate = new Date();\r\n    this.createMarkup(this.selector);\r\n    this.timer(this.targetDate);\r\n  }\r\n  createMarkup(selector) {\r\n    const arrSelector = {\r\n      selectorId: selector,\r\n    };\r\n    const bodyRef = document.querySelector('body');\r\n    bodyRef.insertAdjacentHTML('beforeend', timerMarkup(arrSelector));\r\n  }\r\n  timer(date) {\r\n    let time = date - this.currentDate;\r\n    if (time === 0) return alert('THE TIMER HAS EXPIRED');\r\n    const refs = {\r\n      daysRef: document.querySelector(\r\n        `div[id=\"${this.selector}\"] span[data-value=\"days\"]`,\r\n      ),\r\n      hoursRef: document.querySelector(\r\n        `div[id=\"${this.selector}\"] span[data-value=\"hours\"]`,\r\n      ),\r\n      minsRef: document.querySelector(\r\n        `div[id=\"${this.selector}\"] span[data-value=\"mins\"]`,\r\n      ),\r\n      secsRef: document.querySelector(\r\n        `div[id=\"${this.selector}\"] span[data-value=\"secs\"]`,\r\n      ),\r\n    };\r\n\r\n    setInterval(() => {\r\n      const diffTime = this.timeHandler(time);\r\n      refs.daysRef.textContent = diffTime.days;\r\n      refs.hoursRef.textContent = diffTime.hours;\r\n      refs.minsRef.textContent = diffTime.mins;\r\n      refs.secsRef.textContent = diffTime.secs;\r\n      time = time - 1000;\r\n    }, 1000);\r\n  }\r\n  timeHandler(time) {\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    return { days, hours, mins, secs };\r\n  }\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\n\r\nnew CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2021'),\r\n});\r\n"],"sourceRoot":""}